
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract tasksSpis {
    // Contract can have an instance variables.
    // In this example instance variable `timestamp` is used to store the time of `constructor` or `touch`
    // function call
    uint32 public timestamp;
    uint public k=0;
    string[] public list; 
    struct tasks {
        string name;
        uint32 time;
        bool OK;
    }

    // Contract can have a `constructor` â€“ function that will be called when contract will be deployed to the blockchain.
    // In this example constructor adds current time to the instance variable.
    // All contracts need call tvm.accept(); for succeeded deploy
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();

        timestamp = now;


        





    }

    function renderHelloWorld () public pure returns (string) {
        return 'helloWorld';
    }

    
     mapping(uint=>tasks) number; 
   
    
    
    

    /*function addTasks (string name, uint32 time) public returns (uint TaskID)  {
        //tasks myLes = tasks(name,time,false);
        
        k+=1;
        number[k]=tasks(name,time,false);
        list.push(name);
        TaskID=k;
        return TaskID;
        tvm.accept();
    }*/
     

    function addTasks (string name) public returns (uint TaskID) {
        tvm.accept();
        tasks myLes = tasks(name,12,false);
        k+=1;
        number[k]=myLes;
        list.push(name);
        
        
        return k;

        
        
    }
   








    function TasksList ()  public returns (string[] l) { 
        tvm.accept();
        l=list;
        return l;
         

        
        
    }



    string j;

    function call (uint n) public {
        
        tvm.accept();
    }


    function callTask (uint n) public {
      
        tvm.accept();   
     }

    function callTas (uint n) public returns (string g) {
       
        
        tvm.accept();

     }







    /*function trF (tasks[]) public {
            
        }*/

    

    
}
